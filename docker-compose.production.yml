# docker-compose.production.yml
# Use with: docker-compose -f docker-compose.yml -f docker-compose.production.yml up

services:
  jsonrpc:
    build:
      context: ./
      dockerfile: ./docker/Dockerfile.backend
      target: prod
    environment:
      # Production environment variables
      - FLASK_ENV=production
      - FLASK_DEBUG=0
      - WEB_CONCURRENCY=${WEB_CONCURRENCY:-4}
      - REDIS_URL=${REDIS_URL:-redis://redis:6379/0}
      - DATABASE_POOL_SIZE=${DATABASE_POOL_SIZE:-20}
      - DATABASE_MAX_OVERFLOW=${DATABASE_MAX_OVERFLOW:-10}
      - LOG_LEVEL=${LOG_LEVEL:-info}
      - STATSD_HOST=${STATSD_HOST:-}
      # Inherit existing environment variables
      - FLASK_SERVER_PORT=${RPCPORT}
      - RPCDEBUGPORT=${RPCDEBUGPORT}
      - WEBDRIVERHOST=${WEBDRIVERHOST}
      - WEBDRIVERPORT=${WEBDRIVERPORT}
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:${RPCPORT}/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      replicas: ${JSONRPC_REPLICAS:-2}
      resources:
        limits:
          cpus: '2'
          memory: 2G
        reservations:
          cpus: '1'
          memory: 1G
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
    depends_on:
      database-migration:
        condition: service_completed_successfully
      webdriver:
        condition: service_healthy
      redis:
        condition: service_healthy
      # hardhat:
      #   condition: service_healthy
      #   required: false
      ollama:
        condition: service_started
        required: false

  # Redis service for production (message queue for Socket.IO)
  redis:
    image: redis:7-alpine
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3
    restart: always
    security_opt:
      - "no-new-privileges=true"
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

volumes:
  redis_data: