from backend.database_handler.transactions_processor import TransactionStatus
from backend.node.types import ExecutionResultStatus
from backend.consensus.helpers.utils import _emit_transactions
from backend.consensus.states.transaction_state import TransactionState
from backend.consensus.algorithm.transaction_status import TransactionStatusManager


class FinalizingState(TransactionState):

    async def handle(self, context):
        """
        Handle the finalizing state transition.

        Args:
            context (TransactionContext): The context of the transaction.

        Returns:
            None: The transaction is finalized.
        """
        # Retrieve the leader's receipt from the consensus data
        leader_receipt = context.transaction.consensus_data.leader_receipt

        # Update contract state
        if (context.transaction.status == TransactionStatus.ACCEPTED) and (
            leader_receipt.execution_result == ExecutionResultStatus.SUCCESS
        ):
            # Get the contract snapshot for the transaction's target address
            leaders_contract_snapshot = context.contract_snapshot_factory(
                context.transaction.to_address
            )
            context.contract_processor.update_contract_state(
                context.transaction.to_address,
                finalized_state=leader_receipt.contract_state,
            )

        # Update the transaction status to FINALIZED
        TransactionStatusManager.dispatch_transaction_status_update(
            context.transactions_processor,
            context.transaction.hash,
            TransactionStatus.FINALIZED,
            context.msg_handler,
        )

        # context.transactions_processor.create_rollup_transaction(
        #     context.transaction.hash
        # )

        if context.transaction.status != TransactionStatus.UNDETERMINED:
            # Insert pending transactions generated by contract-to-contract calls
            _emit_transactions(
                context,
                context.transaction.consensus_data.leader_receipt.pending_transactions,
                "finalized",
            )
