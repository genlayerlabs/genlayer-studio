"""change value from decimal to int

Revision ID: eb32e4bdb446
Revises: 986d9a6b0dda
Create Date: 2024-09-17 08:43:37.074242

"""

from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = "eb32e4bdb446"
down_revision: Union[str, None] = "99d3f1bc5a08"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:

    transactions_table = sa.table(
        "transactions",
        sa.column("value", sa.Numeric()),  # Assuming the old type is Numeric or Decimal
    )

    op.execute(
        transactions_table.update()
        .where(transactions_table.c.value < 0)
        .values(value=0)  # Ensure all values are non-negative
    )

    # ### commands auto generated by Alembic - please adjust! ###
    op.alter_column(
        "transactions",
        "value",
        existing_type=sa.NUMERIC(),
        type_=sa.Integer(),
        existing_nullable=True,
    )
    # ### end Alembic commands ###

    # Add CheckConstraint for value column to be >= 0
    op.execute(
        "ALTER TABLE transactions ADD CONSTRAINT value_non_negative CHECK (value >= 0)"
    )


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.alter_column(
        "transactions",
        "value",
        existing_type=sa.Integer(),
        type_=sa.NUMERIC(),
        existing_nullable=True,
    )
    # ### end Alembic commands ###

    # Drop CheckConstraint for value column to be >= 0
    op.execute("ALTER TABLE transactions DROP CONSTRAINT value_non_negative")
