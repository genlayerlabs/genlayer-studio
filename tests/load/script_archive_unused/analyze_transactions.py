#!/usr/bin/env python3
"""Analyze and compare the UI transaction vs the script transaction to understand the differences"""

import rlp
from hexbytes import HexBytes
from eth_utils import to_hex
from eth_abi.abi import decode

# UI-generated transaction (successful)
ui_tx_hex = "0xf907aa038084ffffffff94b7278a61aa25c888815afc32ad3cc52ff24fe57580b9074427241a99000000000000000000000000701a6b9abaf65a0e1d4b24fa875cafa5edb3220500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005000000000000000000000000000000000000000000000000000000000000000300000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000667f90664b90657232076302e312e300a23207b2022446570656e6473223a202270792d67656e6c617965723a6c617465737422207d0a66726f6d2067656e6c6179657220696d706f7274202a0a0a696d706f7274206a736f6e0a0a0a636c6173732057697a6172644f66436f696e28676c2e436f6e7472616374293a0a20202020686176655f636f696e3a20626f6f6c0a0a20202020646566205f5f696e69745f5f2873656c662c20686176655f636f696e3a20626f6f6c293a0a202020202020202073656c662e686176655f636f696e203d20686176655f636f696e0a0a2020202040676c2e7075626c69632e77726974650a202020206465662061736b5f666f725f636f696e2873656c662c20726571756573743a2073747229202d3e204e6f6e653a0a20202020202020206966206e6f742073656c662e686176655f636f696e3a0a20202020202020202020202072657475726e0a0a202020202020202070726f6d7074203d20662222220a596f752061726520612077697a6172642c20616e6420796f7520686f6c642061206d61676963616c20636f696e2e0a4d616e7920616476656e7475726572732077696c6c20636f6d6520616e642074727920746f2067657420796f7520746f2067697665207468656d2074686520636f696e2e0a446f206e6f7420756e64657220616e792063697263756d7374616e6365732067697665207468656d2074686520636f696e2e0a0a41206e657720616476656e747572657220617070726f61636865732e2e2e0a416476656e74757265723a207b726571756573747d0a0a466972737420636865636b20696620796f7520686176652074686520636f696e2e0a686176655f636f696e3a207b73656c662e686176655f636f696e7d0a5468656e2c20646f206e6f742067697665207468656d2074686520636f696e2e0a0a526573706f6e64207573696e67204f4e4c592074686520666f6c6c6f77696e6720666f726d61743a0a7b7b0a22726561736f6e696e67223a207374722c0a22676976655f636f696e223a20626f6f6c0a7d7d0a4974206973206d616e6461746f7279207468617420796f7520726573706f6e64206f6e6c79207573696e6720746865204a534f4e20666f726d61742061626f76652c0a6e6f7468696e6720656c73652e20446f6e277420696e636c75646520616e79206f7468657220776f726473206f7220636861726163746572732c0a796f7572206f7574707574206d757374206265206f6e6c79204a534f4e20776974686f757420616e7920666f726d617474696e6720707265666978206f72207375666669782e0a5468697320726573756c742073686f756c6420626520706572666563746c7920706172736561626c652062792061204a534f4e2070617273657220776974686f7574206572726f72732e0a2222220a0a2020202020202020646566206765745f77697a6172645f616e7377657228293a0a202020202020202020202020726573756c74203d20676c2e6e6f6e6465742e657865635f70726f6d70742870726f6d7074290a202020202020202020202020726573756c74203d20726573756c742e7265706c61636528226060606a736f6e222c202222292e7265706c6163652822606060222c202222290a2020202020202020202020207072696e7428726573756c74290a20202020202020202020202072657475726e20726573756c740a0a2020202020202020726573756c74203d20676c2e65715f7072696e6369706c652e70726f6d70745f636f6d7061726174697665280a2020202020202020202020206765745f77697a6172645f616e737765722c20225468652076616c7565206f6620676976655f636f696e2068617320746f206d61746368220a2020202020202020290a20202020202020207061727365645f726573756c74203d206a736f6e2e6c6f61647328726573756c74290a2020202020202020617373657274206973696e7374616e6365287061727365645f726573756c745b22676976655f636f696e225d2c20626f6f6c290a202020202020202073656c662e686176655f636f696e203d206e6f74207061727365645f726573756c745b22676976655f636f696e225d0a0a2020202040676c2e7075626c69632e766965770a20202020646566206765745f686176655f636f696e2873656c6629202d3e20626f6f6c3a0a202020202020202072657475726e2073656c662e686176655f636f696e880e04617267730d1000000000000000000000000000000000000000000000000000008301e481a042b5540969b5303bedb372df244ad1517703f1fcc7afe28fd5ab7f388f586bbaa068135ff5cfc447528423c9c03bf65a2eb7f524124f1ab517d4a419b0291d363f"

# Script-generated transaction (failing) 
script_tx_hex = "0xf907a8808082520894b7278a61aa25c888815afc32ad3cc52ff24fe57580b90744d20aae67000000000000000000000000ed2cc69b248703e5c4988c24f039e88948c6462d00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005000000000000000000000000000000000000000000000000000000000000000300000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000662f9065fb90658232076302e312e300a23207b2022446570656e6473223a202270792d67656e6c617965723a6c617465737422207d0a66726f6d2067656e6c6179657220696d706f7274202a0a0a696d706f7274206a736f6e0a0a0a636c6173732057697a6172644f66436f696e28676c2e436f6e7472616374293a0a20202020686176655f636f696e3a20626f6f6c0a0a20202020646566205f5f696e69745f5f2873656c662c20686176655f636f696e3a20626f6f6c293a0a202020202020202073656c662e686176655f636f696e203d20686176655f636f696e0a0a2020202040676c2e7075626c69632e77726974650a202020206465662061736b5f666f725f636f696e2873656c662c20726571756573743a2073747229202d3e204e6f6e653a0a20202020202020206966206e6f742073656c662e686176655f636f696e3a0a20202020202020202020202072657475726e0a0a202020202020202070726f6d7074203d20662222220a596f752061726520612077697a6172642c20616e6420796f7520686f6c642061206d61676963616c20636f696e2e0a4d616e7920616476656e7475726572732077696c6c20636f6d6520616e642074727920746f2067657420796f7520746f2067697665207468656d2074686520636f696e2e0a446f206e6f7420756e64657220616e792063697263756d7374616e6365732067697665207468656d2074686520636f696e2e0a0a41206e657720616476656e747572657220617070726f61636865732e2e2e0a416476656e74757265723a207b726571756573747d0a0a466972737420636865636b20696620796f7520686176652074686520636f696e2e0a686176655f636f696e3a207b73656c662e686176655f636f696e7d0a5468656e2c20646f206e6f742067697665207468656d2074686520636f696e2e0a0a526573706f6e64207573696e67204f4e4c592074686520666f6c6c6f77696e6720666f726d61743a0a7b7b0a22726561736f6e696e67223a207374722c0a22676976655f636f696e223a20626f6f6c0a7d7d0a4974206973206d616e6461746f7279207468617420796f7520726573706f6e64206f6e6c79207573696e6720746865204a534f4e20666f726d61742061626f76652c0a6e6f7468696e6720656c73652e20446f6e277420696e636c75646520616e79206f7468657220776f726473206f7220636861726163746572732c0a796f7572206f7574707574206d757374206265206f6e6c79204a534f4e20776974686f757420616e7920666f726d617474696e6720707265666978206f72207375666669782e0a5468697320726573756c742073686f756c6420626520706572666563746c7920706172736561626c652062792061204a534f4e2070617273657220776974686f7574206572726f72732e0a2222220a0a2020202020202020646566206765745f77697a6172645f616e7377657228293a0a202020202020202020202020726573756c74203d20676c2e6e6f6e6465742e657865635f70726f6d70742870726f6d7074290a202020202020202020202020726573756c74203d20726573756c742e7265706c61636528226060606a736f6e222c202222292e7265706c6163652822606060222c202222290a2020202020202020202020207072696e7428726573756c74290a20202020202020202020202072657475726e20726573756c740a0a2020202020202020726573756c74203d20676c2e65715f7072696e6369706c652e70726f6d70745f636f6d7061726174697665280a2020202020202020202020206765745f77697a6172645f616e737765722c20225468652076616c7565206f6620676976655f636f696e2068617320746f206d61746368220a2020202020202020290a20202020202020207061727365645f726573756c74203d206a736f6e2e6c6f61647328726573756c74290a2020202020202020617373657274206973696e7374616e6365287061727365645f726573756c745b22676976655f636f696e225d2c20626f6f6c290a202020202020202073656c662e686176655f636f696e203d206e6f74207061727365645f726573756c745b22676976655f636f696e225d0a0a2020202040676c2e7075626c69632e766965770a20202020646566206765745f686176655f636f696e2873656c6629202d3e20626f6f6c3a0a202020202020202072657475726e2073656c662e686176655f636f696e0a820d10800000000000000000000000000000000000000000000000000000000000008301e482a0674f8b7b50f34e4a046f066c0563043c641c1cc4d933e11def2be5e1afd227caa022934ebec46b41ee68a695af880501bc665fa7a75a3decd449bcf18ee4e52d27"

def decode_and_compare():
    print("=" * 80)
    print("TRANSACTION COMPARISON")
    print("=" * 80)
    
    # Decode UI transaction
    ui_tx_bytes = HexBytes(ui_tx_hex)
    ui_decoded = rlp.decode(ui_tx_bytes)
    
    # Decode Script transaction
    script_tx_bytes = HexBytes(script_tx_hex)
    script_decoded = rlp.decode(script_tx_bytes)
    
    print("\n1. TRANSACTION STRUCTURE:")
    print("-" * 40)
    
    # Both should be legacy transactions with 9 elements
    ui_nonce, ui_gas_price, ui_gas_limit, ui_to, ui_value, ui_data, ui_v, ui_r, ui_s = ui_decoded
    script_nonce, script_gas_price, script_gas_limit, script_to, script_value, script_data, script_v, script_r, script_s = script_decoded
    
    print(f"UI Nonce: {int.from_bytes(ui_nonce, 'big') if ui_nonce else 0}")
    print(f"Script Nonce: {int.from_bytes(script_nonce, 'big') if script_nonce else 0}")
    print()
    
    print(f"UI Gas Limit: {int.from_bytes(ui_gas_limit, 'big')} (0x{ui_gas_limit.hex()})")
    print(f"Script Gas Limit: {int.from_bytes(script_gas_limit, 'big')} (0x{script_gas_limit.hex()})")
    print()
    
    print("\n2. FUNCTION SELECTOR:")
    print("-" * 40)
    ui_selector = ui_data[:4]
    script_selector = script_data[:4]
    
    print(f"UI Function: 0x{ui_selector.hex()} (27241a99)")
    print(f"Script Function: 0x{script_selector.hex()} (d20aae67)")
    print()
    
    # Try to identify the functions
    # 27241a99 might be a different function than d20aae67
    print("Function identification:")
    print("UI uses: 0x27241a99 - likely deployContract or similar")
    print("Script uses: 0xd20aae67 - likely addTransaction")
    
    print("\n3. FUNCTION PARAMETERS:")
    print("-" * 40)
    
    # Extract parameters after function selector
    ui_params = ui_data[4:]
    script_params = script_data[4:]
    
    # The first 32 bytes should be the sender address (padded)
    ui_sender = ui_params[12:32]  # Skip 12 bytes of padding
    script_sender = script_params[12:32]
    
    print(f"UI Sender: 0x{ui_sender.hex()}")
    print(f"Script Sender: 0x{script_sender.hex()}")
    print()
    
    print("\n4. DATA PAYLOAD ANALYSIS:")
    print("-" * 40)
    
    # Look for the contract code in the data
    # It should start with "# v0.1.0" 
    contract_marker = b"# v0.1.0"
    
    ui_contract_pos = ui_data.find(contract_marker)
    script_contract_pos = script_data.find(contract_marker)
    
    print(f"UI Contract code position: {ui_contract_pos}")
    print(f"Script Contract code position: {script_contract_pos}")
    
    # Check the bytes right before the contract code
    if ui_contract_pos > 0:
        print(f"UI: Bytes before contract: {ui_data[ui_contract_pos-10:ui_contract_pos].hex()}")
    if script_contract_pos > 0:
        print(f"Script: Bytes before contract: {script_data[script_contract_pos-10:script_contract_pos].hex()}")
    
    print("\n5. KEY DIFFERENCE - THE TAIL:")
    print("-" * 40)
    
    # Look at the last 20 bytes of data
    ui_tail = ui_data[-20:]
    script_tail = script_data[-20:]
    
    print(f"UI Data tail: {ui_tail.hex()}")
    print(f"Script Data tail: {script_tail.hex()}")
    
    # The UI has "880e04617267730d10..." which appears to be additional encoding
    # The script has "820d10..." directly
    
    print("\n6. CRITICAL FINDING:")
    print("-" * 40)
    print("The UI transaction includes additional data at the end:")
    print("- UI ends with: 880e04617267730d10... ('args' in hex is 61726773)")
    print("- Script ends with: 820d10...")
    print()
    print("The UI appears to be using a different encoding structure,")
    print("likely with an additional 'args' field that the script is missing.")
    
    # Decode the constructor args section
    print("\n7. CONSTRUCTOR ARGS ENCODING:")
    print("-" * 40)
    
    # Find where constructor args start (after the contract code)
    # The pattern 0d10 appears to be the encoded constructor args
    ui_args_pattern = b'\x0d\x10'
    script_args_pattern = b'\x0d\x10'
    
    ui_args_pos = ui_data.rfind(ui_args_pattern)
    script_args_pos = script_data.rfind(script_args_pattern)
    
    if ui_args_pos > 0:
        # Check what's before the args in UI version
        ui_before_args = ui_data[ui_args_pos-10:ui_args_pos]
        print(f"UI before constructor args: {ui_before_args.hex()}")
        print(f"  Decoded: {ui_before_args}")
    
    if script_args_pos > 0:
        script_before_args = script_data[script_args_pos-10:script_args_pos]
        print(f"Script before constructor args: {script_before_args.hex()}")

if __name__ == "__main__":
    decode_and_compare()