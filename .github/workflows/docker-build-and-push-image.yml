name: "Docker build and push to Docker Hub"

on:
  workflow_call:
    inputs:
      docker_build_context:
        required: true
        type: string
        default: .
      dockerfile:
        required: true
        type: string
        default: Dockerfile
      dockerhub_repo:
        required: true
        type: string
      dockerhub_username:
        required: true
        type: string
    secrets:
      dockerhub_token:
        required: true

permissions:
  contents: read

jobs:
  build_and_push_backend:
    name: Push Docker image to Docker Hub
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      # TODO: Once we have the 1Password service account token, we can use the following action to load secrets
      # "better done than perfect"

      # - name: Load secrets from 1Password
      #   uses: 1password/load-secrets-action/configure@v1
      #   id: op-load-secret
      #   with:
      #     service-account-token: ${{ secrets.OP_SERVICE_ACCOUNT_TOKEN }}
      #   env:
      #     DOCKERHUB_USERNAME:
      #     DOCKERHUB_TOKEN:

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ inputs.dockerhub_username }}
          password: ${{ secrets.dockerhub_token }}
          # username: ${{ steps.op-load-secret.outputs.DOCKERHUB_USERNAME }}
          # password: ${{ steps.op-load-secret.outputs.DOCKERHUB_TOKEN }}

      - name: Create .env file
        run: cp .env.example .env

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # jsonrpc
      - name: Docker Metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ inputs.dockerhub_repo }}
          tags: |
            type=ref,event=tag
            type=raw,value=latest

      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          context: ${{ inputs.docker_build_context }}
          file: ${{ inputs.dockerfile }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
