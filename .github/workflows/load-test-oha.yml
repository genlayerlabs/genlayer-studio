name: Load Test with oha CLI

on:
  workflow_call:
    inputs:
      oha-version:
        description: 'Version of oha CLI to use for load testing'
        required: false
        type: string
        default: 'v1.9.0'
  pull_request:

jobs:
  load-test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install oha
        run: |
          sudo apt-get update
          sudo apt-get install -y curl jq
          # Use the input version or default
          OHA_VERSION="${{ inputs.oha-version || 'v1.9.0' }}"
          echo "Installing oha version: $OHA_VERSION"

          # Try to download oha
          if ! curl -sSfL "https://github.com/hatoo/oha/releases/download/${OHA_VERSION}/oha-linux-amd64" -o oha; then
            echo "Failed to download oha version $OHA_VERSION, trying latest..."
            # Fallback to latest version
            LATEST_VERSION=$(curl -s https://api.github.com/repos/hatoo/oha/releases/latest | jq -r '.tag_name')
            echo "Using latest version: $LATEST_VERSION"
            curl -sSfL "https://github.com/hatoo/oha/releases/download/${LATEST_VERSION}/oha-linux-amd64" -o oha
          fi

          chmod +x oha
          sudo mv oha /usr/local/bin
          oha --version

      - name: Copy .env file
        run: cp .env.example .env

      - name: Changing URL for rpc server to localhost
        run: sed -i "s/'jsonrpc'/'localhost'/g" .env

      - name: Remove OPENAIKEY from the .env file so it can be loaded from the environment
        run: sed -i "/^OPENAIKEY *= *'<add_your_api_key_here>'$/d" .env

      - name: Adding OPENAIKEY to the .env file
        env:
          OPENAIKEY: ${{ secrets.OPENAIKEY }}
        run: printf "\nOPENAIKEY='$OPENAIKEY'\n" >> .env

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Cache Docker layers
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Run Docker Compose
        run: docker compose up -d

      - name: Wait for services to be up
        run: |
          timeout=60
          counter=0
          while [[ "$counter" -lt "$timeout" ]]; do
            if curl -X POST -H "Content-Type: application/json" -d '{"jsonrpc":"2.0","method":"ping","params":[],"id":1}' http://localhost:4000/api | grep -q "OK"; then
              echo "RPC server is up!"
              break
            else
              echo "Waiting for RPC server... ($counter/$timeout)"
              sleep 5
              counter=$((counter+1))
            fi
          done
          # Fail if the service didn't start within the timeout
          if [[ "$counter" -ge "$timeout" ]]; then
            echo "Error: Timeout while waiting for RPC server"
            exit 1
          fi

          # Wait additional 30 seconds for services to stabilize
          echo "Waiting 30 seconds for services to stabilize..."
          sleep 30

      - name: Verify Chain ID
        run: |
          echo "Verifying chain ID is readable..."
          max_retries=5
          retry_count=0
          chain_id=""

          while [[ "$retry_count" -lt "$max_retries" ]]; do
            echo "Attempt $((retry_count + 1))/$max_retries to read chain ID..."

            # Try to get the chain ID
            response=$(curl -s -X POST http://localhost:4000/api \
              -H "Content-Type: application/json" \
              -d '{
                "jsonrpc": "2.0",
                "method": "eth_chainId",
                "params": [],
                "id": 1
              }')

            echo "Response: $response"

            # Check if we got a valid chain ID response
            if echo "$response" | grep -q '"result"'; then
              # Handle both formatted and unformatted JSON
              chain_id=$(echo "$response" | grep -o '"result"[[:space:]]*:[[:space:]]*"[^"]*"' | sed 's/.*"result"[[:space:]]*:[[:space:]]*"//;s/"$//')
              if [ ! -z "$chain_id" ]; then
                echo "✅ Successfully read chain ID: $chain_id"
                break
              fi
            fi

            retry_count=$((retry_count + 1))

            if [[ "$retry_count" -lt "$max_retries" ]]; then
              echo "Failed to read chain ID, waiting 10 seconds before retry..."
              sleep 10
            fi
          done

          # Check if we successfully got the chain ID
          if [ -z "$chain_id" ]; then
            echo "❌ ERROR: Failed to read chain ID after $max_retries attempts"
            echo "The blockchain service may not be properly initialized"
            exit 1
          fi

          echo "Chain ID verification successful, proceeding with tests..."

      - name: Setup validators
        run: |
          echo "Creating validators with 5 second delays..."
          for i in {1..5}; do
            echo "Creating validator $i/5..."
            response=$(curl -s -X POST http://localhost:4000/api \
              -H "Content-Type: application/json" \
              -d '{
                "jsonrpc": "2.0",
                "method": "sim_createRandomValidator",
                "params": [1],
                "id": '"$i"'
              }')

            # Check if creation was successful
            if echo "$response" | grep -q '"result"'; then
              echo "✅ Validator $i created successfully"
              echo "Response: $response"
            else
              echo "❌ Failed to create validator $i"
              echo "Response: $response"
            fi

            # Wait 5 seconds between validator creation
            if [ $i -lt 5 ]; then
              echo "Waiting 5 seconds before next validator..."
              sleep 5
            fi
          done

          # Wait for validators to be fully registered
          echo "Waiting 10 seconds for validators to be registered..."
          sleep 10

          # Verify validators were created
          echo "Verifying validators..."
          response=$(curl -s -X POST http://localhost:4000/api \
            -H "Content-Type: application/json" \
            -d '{
              "jsonrpc": "2.0",
              "method": "sim_countValidators",
              "params": [],
              "id": 100
            }')

          echo "Count response: $response"

          # Try different parsing approaches
          count=$(echo "$response" | grep -o '"result"[[:space:]]*:[[:space:]]*[0-9]*' | grep -o '[0-9]*' | tail -1)

          # If count is empty, try without spaces
          if [ -z "$count" ]; then
            count=$(echo "$response" | grep -o '"result":[0-9]*' | grep -o '[0-9]*' | tail -1)
          fi

          # Default to 0 if still empty
          if [ -z "$count" ]; then
            count=0
          fi

          echo "Total validators: $count"

          if [ "$count" -lt 5 ]; then
            echo "❌ Error: Expected at least 5 validators, found $count"
            echo "Trying to list all validators for debugging..."
            curl -s -X POST http://localhost:4000/api \
              -H "Content-Type: application/json" \
              -d '{
                "jsonrpc": "2.0",
                "method": "sim_getAllValidators",
                "params": [],
                "id": 101
              }'
            exit 1
          fi
          echo "✅ Successfully created $count validators"

      - name: Run Load Test - Contract Deploy and Read
        run: |
          cd tests/load
          chmod +x load_test_contract_deploy_and_read.sh
          BASE_URL="http://localhost:4000/api" ./load_test_contract_deploy_and_read.sh 5 1

      - name: Run Load Test - All Read Setup Endpoints
        run: |
          cd tests/load
          chmod +x load_test_all_read_setup_endpoints.sh
          BASE_URL="http://localhost:4000/api" REQUESTS=500 CONCURRENCY=100 ./load_test_all_read_setup_endpoints.sh

      - name: Shutdown Docker Compose
        if: always()
        run: docker compose down -v
