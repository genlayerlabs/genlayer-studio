name: Load Test with oha CLI

on:
  workflow_call:
    inputs:
      oha-version:
        description: 'Version of oha CLI to use for load testing'
        required: false
        type: string
        default: 'v1.9.0'
  pull_request:

jobs:
  load-test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install oha
        run: |
          sudo apt-get update
          sudo apt-get install -y curl jq
          # Use the input version or default
          OHA_VERSION="${{ inputs.oha-version || 'v1.9.0' }}"
          echo "Installing oha version: $OHA_VERSION"

          # Try to download oha
          if ! curl -sSfL "https://github.com/hatoo/oha/releases/download/${OHA_VERSION}/oha-linux-amd64" -o oha; then
            echo "Failed to download oha version $OHA_VERSION, trying latest..."
            # Fallback to latest version
            LATEST_VERSION=$(curl -s https://api.github.com/repos/hatoo/oha/releases/latest | jq -r '.tag_name')
            echo "Using latest version: $LATEST_VERSION"
            curl -sSfL "https://github.com/hatoo/oha/releases/download/${LATEST_VERSION}/oha-linux-amd64" -o oha
          fi

          chmod +x oha
          sudo mv oha /usr/local/bin
          oha --version

      - name: Copy .env file
        run: cp .env.example .env

      - name: Changing URL for rpc server to localhost
        run: sed -i "s/'jsonrpc'/'localhost'/g" .env

      - name: Remove OPENAIKEY from the .env file so it can be loaded from the environment
        run: sed -i "/^OPENAIKEY *= *'<add_your_api_key_here>'$/d" .env

      - name: Adding OPENAIKEY to the .env file
        env:
          OPENAIKEY: ${{ secrets.OPENAIKEY }}
        run: printf "\nOPENAIKEY='$OPENAIKEY'\n" >> .env

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Cache Docker layers
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Run Docker Compose
        run: docker compose up -d

      - name: Wait for services to be up
        run: |
          echo "Waiting for frontend container to be ready..."
          timeout=120
          counter=0
          frontend_ready=false

          # Wait for frontend to be ready
          while [[ "$counter" -lt "$timeout" ]]; do
            # Check if frontend container logs show it's ready
            if docker compose logs frontend 2>/dev/null | tail -20 | grep -q "➜  Local:   http://localhost:8080/"; then
              echo "✅ Frontend is ready!"
              frontend_ready=true
              break
            else
              echo "Waiting for frontend... ($counter/$timeout)"
              sleep 5
              counter=$((counter+1))
            fi
          done

          if [ "$frontend_ready" = false ]; then
            echo "⚠️ Frontend may not be fully ready after $timeout seconds"
            echo "Checking if at least the RPC server is responding..."
          fi

          # Also verify RPC server is responding
          echo "Checking RPC server..."
          rpc_counter=0
          rpc_timeout=60
          while [[ "$rpc_counter" -lt "$rpc_timeout" ]]; do
            if curl -X POST -H "Content-Type: application/json" -d '{"jsonrpc":"2.0","method":"ping","params":[],"id":1}' http://localhost:4000/api | grep -q "OK"; then
              echo "✅ RPC server is up!"
              break
            else
              echo "Waiting for RPC server... ($rpc_counter/$rpc_timeout)"
              sleep 5
              rpc_counter=$((rpc_counter+1))
            fi
          done

          # Fail if the RPC service didn't start within the timeout
          if [[ "$rpc_counter" -ge "$rpc_timeout" ]]; then
            echo "Error: Timeout while waiting for RPC server"
            docker compose logs
            exit 1
          fi

          # If frontend is ready, we're good to go
          if [ "$frontend_ready" = true ]; then
            echo "✅ All services are ready!"
          else
            # If frontend isn't ready but RPC is, wait a bit more
            echo "Waiting additional 3 seconds for all services to stabilize..."
            sleep 3
          fi

      - name: Verify Chain ID
        run: |
          echo "Verifying chain ID is readable..."
          max_retries=5
          retry_count=0
          chain_id=""

          while [[ "$retry_count" -lt "$max_retries" ]]; do
            echo "Attempt $((retry_count + 1))/$max_retries to read chain ID..."

            # Try to get the chain ID
            response=$(curl -s -X POST http://localhost:4000/api \
              -H "Content-Type: application/json" \
              -d '{
                "jsonrpc": "2.0",
                "method": "eth_chainId",
                "params": [],
                "id": 1
              }')

            echo "Response: $response"

            # Check if we got a valid chain ID response
            if echo "$response" | grep -q '"result"'; then
              # Handle both formatted and unformatted JSON
              chain_id=$(echo "$response" | grep -o '"result"[[:space:]]*:[[:space:]]*"[^"]*"' | sed 's/.*"result"[[:space:]]*:[[:space:]]*"//;s/"$//')
              if [ ! -z "$chain_id" ]; then
                echo "✅ Successfully read chain ID: $chain_id"
                break
              fi
            fi

            retry_count=$((retry_count + 1))

            if [[ "$retry_count" -lt "$max_retries" ]]; then
              echo "Failed to read chain ID, waiting 10 seconds before retry..."
              sleep 10
            fi
          done

          # Check if we successfully got the chain ID
          if [ -z "$chain_id" ]; then
            echo "❌ ERROR: Failed to read chain ID after $max_retries attempts"
            echo "The blockchain service may not be properly initialized"
            exit 1
          fi

          echo "Chain ID verification successful, proceeding with tests..."

      - name: Setup validators
        run: |
          echo "Creating validators with 5 second delays..."
          for i in {1..5}; do
            echo "Creating validator $i/5..."
            response=$(curl -s -X POST http://localhost:4000/api \
              -H "Content-Type: application/json" \
              -d '{
                "jsonrpc": "2.0",
                "method": "sim_createRandomValidator",
                "params": [1],
                "id": '"$i"'
              }')

            # Check if creation was successful
            if echo "$response" | grep -q '"result"'; then
              echo "✅ Validator $i created successfully"
              echo "Response: $response"
            else
              echo "❌ Failed to create validator $i"
              echo "Response: $response"
            fi

            # Wait 5 seconds between validator creation
            if [ $i -lt 5 ]; then
              echo "Waiting 5 seconds before next validator..."
              sleep 5
            fi
          done

          # Wait for validators to be fully registered
          echo "Waiting 10 seconds for validators to be registered..."
          sleep 10

          # Verify validators were created
          echo "Verifying validators..."
          response=$(curl -s -X POST http://localhost:4000/api \
            -H "Content-Type: application/json" \
            -d '{
              "jsonrpc": "2.0",
              "method": "sim_countValidators",
              "params": [],
              "id": 100
            }')

          echo "Count response: $response"

          # Try different parsing approaches
          count=$(echo "$response" | grep -o '"result"[[:space:]]*:[[:space:]]*[0-9]*' | grep -o '[0-9]*' | tail -1)

          # If count is empty, try without spaces
          if [ -z "$count" ]; then
            count=$(echo "$response" | grep -o '"result":[0-9]*' | grep -o '[0-9]*' | tail -1)
          fi

          # Default to 0 if still empty
          if [ -z "$count" ]; then
            count=0
          fi

          echo "Total validators: $count"

          if [ "$count" -lt 5 ]; then
            echo "❌ Error: Expected at least 5 validators, found $count"
            echo "Trying to list all validators for debugging..."
            curl -s -X POST http://localhost:4000/api \
              -H "Content-Type: application/json" \
              -d '{
                "jsonrpc": "2.0",
                "method": "sim_getAllValidators",
                "params": [],
                "id": 101
              }'
            exit 1
          fi
          echo "✅ Successfully created $count validators"

      - name: Run Load Test - Contract Deploy and Read
        run: |
          cd tests/load

          # First, let's wait a bit after validator setup
          echo "Waiting 15 seconds for system to stabilize after validator setup..."
          sleep 15

          # Install required Python packages
          pip install genlayer-py requests

          # Deploy contracts one by one with delays
          echo "=== Contract Deployment Test ==="
          echo "Deploying 3 contracts with delays..."

          CONTRACT_ADDRESSES=()
          DEPLOY_SUCCESS=0
          DEPLOY_FAIL=0

          for i in {1..3}; do
            echo ""
            echo "[Deploy $i/3] Starting deployment..."

            # Run the deployment script in a subshell to capture both output and exit code
            set +e  # Disable exit on error temporarily
            result=$(python3 deploy_contract/wizard_deploy.py "http://localhost:4000/api" 2>&1)
            exit_code=$?
            set -e  # Re-enable exit on error

            echo "[Deploy $i/3] Script exit code: $exit_code"
            echo "[Deploy $i/3] Script output: $result"

            # Look for a contract address in the output
            addr=$(echo "$result" | grep -oE "0x[a-fA-F0-9]{40}" | tail -n 1)

            # Consider deployment successful if we found an address, regardless of exit code
            if [ -n "$addr" ]; then
              echo "[Deploy $i/3] ✅ Success - Contract: $addr"
              CONTRACT_ADDRESSES+=("$addr")
              DEPLOY_SUCCESS=$((DEPLOY_SUCCESS + 1))

              # Wait longer after successful deployment
              if [ $i -lt 3 ]; then
                echo "Waiting 3 seconds for contract to be fully processed..."
                sleep 3
              fi
            else
              echo "[Deploy $i/3] ❌ Failed - no address returned"
              echo "Output: $result"
              DEPLOY_FAIL=$((DEPLOY_FAIL + 1))

              # Still wait between failed attempts
              if [ $i -lt 3 ]; then
                echo "Waiting 10 seconds before retry..."
                sleep 10
              fi
            fi
          done

          echo ""
          echo "=== Deployment Summary ==="
          echo "Successful: $DEPLOY_SUCCESS"
          echo "Failed: $DEPLOY_FAIL"

          if [ $DEPLOY_SUCCESS -eq 0 ]; then
            echo "❌ All deployments failed"
            exit 1
          fi

          # Wait for contracts to be indexed
          echo ""
          echo "Waiting 3 seconds for contracts to be indexed..."
          sleep 3

          # Read from deployed contracts
          echo ""
          echo "=== Reading Contract States ==="
          READ_SUCCESS=0
          READ_FAIL=0

          for addr in "${CONTRACT_ADDRESSES[@]}"; do
            echo "Reading from contract: $addr"

            # Create temporary file with address
            echo "$addr" > temp_contract.addr

            # Run read script with proper error handling
            set +e  # Disable exit on error temporarily
            read_output=$(python3 deploy_contract/wizard_read.py temp_contract.addr "http://localhost:4000/api" 2>&1)
            read_exit_code=$?
            set -e  # Re-enable exit on error

            echo "Read exit code: $read_exit_code"
            echo "Read output: $read_output"

            # Check if read was successful
            if [ $read_exit_code -eq 0 ]; then
              echo "✅ Successfully read contract state"
              READ_SUCCESS=$((READ_SUCCESS + 1))
            else
              echo "❌ Failed to read contract state (exit code: $read_exit_code)"
              READ_FAIL=$((READ_FAIL + 1))
            fi

            rm -f temp_contract.addr

            # Add delay between reads to avoid overwhelming the system
            echo "Waiting 5 seconds before next read..."
            sleep 5
          done

          echo ""
          echo "=== Final Summary ==="
          echo "Deployments: $DEPLOY_SUCCESS successful, $DEPLOY_FAIL failed"
          echo "Reads: $READ_SUCCESS successful, $READ_FAIL failed"

          # More lenient failure conditions - only fail if ALL tests failed
          if [ $DEPLOY_SUCCESS -eq 0 ] && [ ${#CONTRACT_ADDRESSES[@]} -eq 0 ]; then
            echo "❌ Critical failure: No contracts were deployed successfully"
            exit 1
          fi

          # Warn but don't fail if some tests failed
          if [ $DEPLOY_FAIL -gt 0 ] || [ $READ_FAIL -gt 0 ]; then
            echo "⚠️ Warning: Some tests failed, but continuing as we had at least $DEPLOY_SUCCESS successful deployments"
          fi

      - name: Run Load Test - All Read Setup Endpoints
        run: |
          cd tests/load

          # Wait before starting endpoint tests
          echo "Waiting 10 seconds before starting endpoint tests..."
          sleep 10

          # Run with reduced load to avoid overwhelming the system
          echo "Running endpoint load tests with reduced load..."
          chmod +x load_test_all_read_setup_endpoints.sh
          chmod +x test_endpoint.sh

          # Run the load test script with proper error handling and capture output
          set +e  # Disable exit on error temporarily

          echo "=== Starting Endpoint Load Tests ==="
          echo "Configuration: REQUESTS=100 CONCURRENCY=10"
          echo ""

          # Reduce the load: 100 requests with 10 concurrent connections
          # Capture both stdout and stderr
          BASE_URL="http://localhost:4000/api" REQUESTS=100 CONCURRENCY=10 ./load_test_all_read_setup_endpoints.sh 2>&1 | tee endpoint_test_output.log
          load_test_exit_code=${PIPESTATUS[0]}

          set -e  # Re-enable exit on error

          echo ""
          echo "=== Load Test Results ==="
          echo "Load test exit code: $load_test_exit_code"

          # Parse test results from the output
          if [ -f endpoint_test_output.log ]; then
            TOTAL_TESTS=$(grep "Total Tests:" endpoint_test_output.log | awk '{print $3}' || echo "0")
            PASSED_TESTS=$(grep "Passed:" endpoint_test_output.log | awk '{print $2}' || echo "0")
            FAILED_TESTS=$(grep "Failed:" endpoint_test_output.log | awk '{print $2}' || echo "0")

            echo "Test Summary:"
            echo "  Total: $TOTAL_TESTS"
            echo "  Passed: $PASSED_TESTS"
            echo "  Failed: $FAILED_TESTS"
          fi

          # Check the exit code and test results
          if [ $load_test_exit_code -eq 0 ]; then
            echo "✅ Endpoint load tests completed successfully"
          else
            echo "⚠️ Some endpoint tests failed (exit code: $load_test_exit_code)"

            # Only consider it a critical failure if more than 50% of tests failed
            if [ -n "$TOTAL_TESTS" ] && [ "$TOTAL_TESTS" -gt 0 ] && [ -n "$FAILED_TESTS" ]; then
              FAILURE_RATE=$(awk "BEGIN {printf \"%.0f\", ($FAILED_TESTS/$TOTAL_TESTS)*100}")
              echo "Failure rate: ${FAILURE_RATE}%"

              if [ "$FAILURE_RATE" -gt 50 ]; then
                echo "❌ Critical: More than 50% of tests failed"

                # Check if services are still alive
                echo "Checking if services are still responsive..."
                sleep 5

                set +e
                curl -s -X POST -H "Content-Type: application/json" \
                  -d '{"jsonrpc":"2.0","method":"ping","params":[],"id":1}' \
                  http://localhost:4000/api | grep -q "OK"
                ping_result=$?
                set -e

                if [ $ping_result -eq 0 ]; then
                  echo "✅ RPC server is still responding"
                  echo "⚠️ High failure rate but services are alive - likely load-related issues"
                else
                  echo "❌ RPC server not responding - services may have crashed"
                  # Show docker logs for debugging
                  echo "Docker compose logs (last 50 lines):"
                  docker compose logs --tail=50
                  exit 1
                fi
              else
                echo "⚠️ Acceptable failure rate (${FAILURE_RATE}%) - continuing"
              fi
            fi

            echo "⚠️ Continuing despite some endpoint test failures (load testing is best-effort)"
          fi

          # Check if the report files were generated
          if [ -f api_test_report.json ]; then
            echo "✅ JSON report generated: api_test_report.json"
          fi
          if [ -f api_test_report.html ]; then
            echo "✅ HTML report generated: api_test_report.html"
          fi

      - name: Shutdown Docker Compose
        if: always()
        run: docker compose down -v
