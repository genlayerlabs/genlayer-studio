sources:
  docker_logs:
    type: docker_logs
    exclude_containers:
      - vector

transforms:
  docker_logs_transform:
    type: remap
    inputs:
      - docker_logs
    source: |
      # Ensure message is a string
      .message = to_string(.message) ?? ""

      # Parse severity from Loguru format with ANSI codes: [1mLEVEL[0m | message
      # Also handle format: <level>LEVEL</level> | message
      ansi_parsed = parse_regex(.message, r'^\[1m(?P<level>\w+)\s*\[0m\s*\|\s*(?P<msg>.*)') ?? {}
      xml_parsed = parse_regex(.message, r'^<level>(?P<level>\w+)\s*</level>\s*\|\s*(?P<msg>.*)') ?? {}

      if exists(ansi_parsed.level) {
        # ANSI format detected
        .severity = upcase(string!(ansi_parsed.level))
        .message = ansi_parsed.msg ?? .message
      } else if exists(xml_parsed.level) {
        # XML format detected
        .severity = upcase(string!(xml_parsed.level))
        .message = xml_parsed.msg ?? .message
      } else if contains(.message, "ERROR") || contains(.message, "WARNING") || contains(.message, "CRITICAL") {
        # Handle plain ERROR/WARNING messages
        if starts_with(.message, "ERROR") {
          .severity = "ERROR"
        } else if starts_with(.message, "WARNING") {
          .severity = "WARNING"
        } else if starts_with(.message, "CRITICAL") {
          .severity = "CRITICAL"
        } else {
          .severity = "INFO"
        }
      } else {
        .severity = "INFO"
      }

      # Map SUCCESS to INFO for GCP
      if .severity == "SUCCESS" { .severity = "INFO" }

      # Add standard Loki labels
      .labels = {"job": "docker", "instance": "${SERVER_NAME}", "container": .container_name}
      # Convert timestamp to RFC3339
      .timestamp = format_timestamp!(.timestamp, format: "%+")

sinks:
  gcp_logs:
    type: gcp_stackdriver_logs
    inputs:
      - docker_logs_transform
    credentials_path: /etc/vector/gcp_credentials.json
    log_id: "genlayer-logs"
    project_id: "${GCP_PROJECT_ID}"
    severity_key: "severity"  # ADDED: Tell GCP to use our severity field
    resource:
      type: "generic_node"
    tls:
      verify_certificate: true
    request:
      retry_attempts: 3

  gcp_pubsub:
    type: gcp_pubsub
    inputs:
      - docker_logs_transform
    credentials_path: /etc/vector/gcp_credentials.json
    project: "${GCP_PROJECT_ID}"
    topic: "observability_logs"
    encoding:
      codec: json