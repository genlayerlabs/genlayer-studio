services:
  nginx:
    build:
      context: ./
      dockerfile: ./docker/Dockerfile.nginx
    cap_add:
      - NET_BIND_SERVICE
    ports:
      - "80:80"
      - "443:443"   # For the frontend
      - "8443:8443" # For the jsonrpc
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./nginx/rpc-blocker.lua:/etc/nginx/rpc-blocker.lua:ro
    depends_on:
      - frontend
      - jsonrpc
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: always
    security_opt:
      - "no-new-privileges=true"
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  frontend:
    build:
      context: ./
      dockerfile: ./docker/Dockerfile.frontend
      target: ${FRONTEND_BUILD_TARGET:-final}
    ports:
      - "${FRONTEND_PORT}:8080"
    volumes:
      - ./examples:/app/src/assets/examples
      - ./frontend/src:/app/src
    depends_on:
      jsonrpc:
        condition: service_healthy
    expose:
      - "${FRONTEND_PORT}"
    restart: always
    security_opt:
      - "no-new-privileges=true"
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  jsonrpc:
    build:
      context: ./
      dockerfile: ./docker/Dockerfile.backend
      target: ${BACKEND_BUILD_TARGET:-prod}
    environment:
      - FLASK_SERVER_PORT=${RPCPORT}
      # TODO: remove this in production
      - PYTHONUNBUFFERED=1
      - RPCDEBUGPORT=${RPCDEBUGPORT}
    ports:
      - "${RPCPORT}:${RPCPORT}"
      - "${RPCDEBUGPORT}:${RPCDEBUGPORT}"
    volumes:
      - ./.env:/app/.env
      - ./backend:/app/backend
    depends_on:
      ollama:
        condition: service_started
      database-migration:
        condition: service_completed_successfully
    expose:
      - "${RPCPORT}"
    healthcheck:
      test: ["CMD", "python", "backend/healthcheck.py", "--port", "${RPCPORT}"]
      interval: 1s
      timeout: 1s
      retries: 15
      start_period: 1s
    restart: always
    security_opt:
      - "no-new-privileges=true"
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    deploy:
      replicas: ${JSONRPC_REPLICAS:-1}

  webrequest:
    build:
      context: ./
      dockerfile: ./docker/Dockerfile.webrequest
    shm_size: 2gb
    volumes:
      - ./webrequest:/app/webrequest
    environment:
      - FLASK_SERVER_PORT=${WEBREQUESTPORT}
      # TODO: remove this in production
      - PYTHONUNBUFFERED=1
    expose:
      - "${WEBREQUESTPORT}"
    restart: always
    security_opt:
      - "no-new-privileges=true"
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  ollama:
    image: ollama/ollama:0.3.11
    ports:
      - 11434:11434
    volumes:
      - ./.ollama:/root/.ollama
    container_name: ollama
    tty: true
    restart: always
    security_opt:
      - "no-new-privileges=true"
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  postgres:
    image: postgres:16-alpine
    ports:
      - "${DBPORT}:5432"
    environment:
      - POSTGRES_USER=${DBUSER}
      - POSTGRES_PASSWORD=${DBPASSWORD}
      - POSTGRES_DB=${DBNAME}
    healthcheck:
      test: pg_isready -U ${DBUSER} -d ${DBNAME}
      interval: 10s
      timeout: 3s
      retries: 3
    restart: always
    security_opt:
      - "no-new-privileges=true"
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    # If you want your db to persist in dev
    volumes:
     - "./data/postgres:/var/lib/postgresql/data"

  database-migration:
    build:
      context: .
      dockerfile: docker/Dockerfile.database-migration
    environment:
      - DB_URL=postgresql://${DBUSER}:${DBUSER}@postgres/${DBNAME}
    depends_on:
      postgres:
        condition: service_healthy
