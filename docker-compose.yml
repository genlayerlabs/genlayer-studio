services:
  traefik:
    profiles: ["studio"]
    image: traefik:v3.3
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./traefik.yaml:/etc/traefik/traefik.yaml:ro

  frontend:
    build:
      context: ./
      dockerfile: ./docker/Dockerfile.frontend
      target: ${FRONTEND_BUILD_TARGET:-final}
      args:
        - VITE_*
    ports:
      - "${FRONTEND_PORT}:8080"
    volumes:
      - ./examples:/app/src/assets/examples
      - ./frontend/src:/app/src
    depends_on:
      jsonrpc:
        condition: service_healthy
    expose:
      - "${FRONTEND_PORT}"
    environment:
      - VITE_*
    restart: always
    security_opt:
      - "no-new-privileges=true"
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    labels:
      traefik.enable: true
      traefik.http.routers.frontend.rule: Host(`${SERVER_NAME}`)
      traefik.http.routers.frontend.entrypoints: websecure
      traefik.http.routers.frontend.tls: true

  jsonrpc:
    build:
      context: ./
      dockerfile: ./docker/Dockerfile.backend
      target: ${BACKEND_BUILD_TARGET:-prod}
    environment:
      - FLASK_SERVER_PORT=${RPCPORT}
      # TODO: remove this in production
      - PYTHONUNBUFFERED=1
      - RPCDEBUGPORT=${RPCDEBUGPORT}
      - WEBREQUESTPORT=${WEBREQUESTPORT}
      - WEBREQUESTHOST=${WEBREQUESTHOST}
      - WEBDRIVERHOST=${WEBDRIVERHOST}
      - WEBREQUESTPROTOCOL=${WEBREQUESTPROTOCOL}
    ports:
      - "${RPCPORT}:${RPCPORT}"
      - "${RPCDEBUGPORT}:${RPCDEBUGPORT}"
    volumes:
      - ./.env:/app/.env
      - ./backend:/app/backend
      - hardhat_artifacts:/app/hardhat/artifacts
      - hardhat_deployments:/app/hardhat/deployments
    depends_on:
      database-migration:
        condition: service_completed_successfully
      webrequest:
        condition: service_healthy
      webdriver:
        condition: service_healthy
      hardhat:
        condition: service_healthy
        required: false
    expose:
      - "${RPCPORT}"
    healthcheck:
      test: ["CMD", "python3", "backend/healthcheck.py", "--port", "${RPCPORT}"]
      interval: 30s
      timeout: 10s
      retries: 10
      start_period: 30s
    restart: always
    security_opt:
      - "no-new-privileges=true"
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    deploy:
      replicas: ${JSONRPC_REPLICAS:-1}
    labels:
      traefik.enable: true
      traefik.http.routers.jsonrpc.rule: Host(`${SERVER_NAME}`) && (PathPrefix(`/api`) || PathPrefix(`/socket.io`))
      traefik.http.routers.jsonrpc.entrypoints: websecure
      traefik.http.routers.jsonrpc.tls: true

  webrequest:
    build:
      context: ./
      dockerfile: ./docker/Dockerfile.webrequest
    volumes:
      - ./.env:/app/webrequest/.env
      - ./webrequest:/app/webrequest
    environment:
      - FLASK_SERVER_PORT=${WEBREQUESTPORT}
      - WEBDRIVERPORT=${WEBDRIVERPORT}
      # TODO: remove this in production
      - PYTHONUNBUFFERED=1
    depends_on:
      ollama:
        condition: service_started
    expose:
      - "${WEBREQUESTPORT}:${WEBREQUESTPORT}"
    restart: always
    security_opt:
      - "no-new-privileges=true"
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  webdriver:
    build:
      context: ./
      dockerfile: ./docker/Dockerfile.webdriver
    shm_size: 2gb
    volumes:
      - ./.env:/wd/.env
    environment:
      - WEBDRIVERPORT=${WEBDRIVERPORT}
    expose:
      - "${WEBDRIVERPORT}:${WEBDRIVERPORT}"
    restart: always
    security_opt:
      - "no-new-privileges=true"
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  ollama:
    image: ollama/ollama:0.6.6
    ports:
      - 11434:11434
    volumes:
      - ./.ollama:/root/.ollama
    container_name: ollama
    tty: true
    restart: always
    security_opt:
      - "no-new-privileges=true"
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  postgres:
    image: postgres:16-alpine
    ports:
      - "${DBPORT}:5432"
    environment:
      - POSTGRES_USER=${DBUSER}
      - POSTGRES_PASSWORD=${DBPASSWORD}
      - POSTGRES_DB=${DBNAME}
    healthcheck:
      test: pg_isready -U ${DBUSER} -d ${DBNAME}
      interval: 10s
      timeout: 3s
      retries: 3
    restart: always
    security_opt:
      - "no-new-privileges=true"
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    # If you want your db to persist in dev
    volumes:
     - "./data/postgres:/var/lib/postgresql/data"

  database-migration:
    build:
      context: .
      dockerfile: docker/Dockerfile.database-migration
    environment:
      - DB_URL=postgresql://${DBUSER}:${DBUSER}@postgres/${DBNAME}
      - WEBREQUESTPORT=${WEBREQUESTPORT}
      - WEBREQUESTHOST=${WEBREQUESTHOST}
      - WEBDRIVERHOST=${WEBDRIVERHOST}
      - WEBREQUESTPROTOCOL=${WEBREQUESTPROTOCOL}
    depends_on:
      postgres:
        condition: service_healthy
      webrequest:
        condition: service_healthy

  hardhat:
    profiles: ["hardhat"]
    build:
      context: .
      dockerfile: docker/Dockerfile.hardhat
    ports:
      - "${HARDHAT_PORT:-8545}:8545"
    volumes:
      - ./hardhat:/app/hardhat_src
      - hardhat_artifacts:/app/artifacts
      - hardhat_cache:/app/cache
      - hardhat_deployments:/app/deployments
      - hardhat_snapshots:/app/snapshots
    restart: always
    labels:
      traefik.enable: true
      traefik.http.routers.hardhat.rule: Host(`${SERVER_NAME}`) && PathPrefix(`/hardhat`)
      traefik.http.routers.hardhat.entrypoints: websecure
      traefik.http.routers.hardhat.tls: true

volumes:
  hardhat_artifacts:
  hardhat_cache:
  hardhat_deployments:
  ignition_deployments:
  hardhat_snapshots: