FROM ubuntu:24.04 AS base

ARG TARGETPLATFORM
ARG TARGETARCH

ARG GENVM_TAG=v0.1.3

ARG path=/app
WORKDIR $path

SHELL ["/bin/bash", "-x", "-c"]
RUN apt-get update -y \
    && DEBIAN_FRONTEND=noninteractive TZ=Etc/UTC apt-get install -y --no-install-recommends \
        curl unzip xz-utils ca-certificates python3.12 libssl3 \
    && mkdir -p "$HOME/.config/pip/" \
    && printf "[global]\nbreak-system-packages = true\n" >> "$HOME/.config/pip/pip.conf" \
    && update-alternatives --install /usr/bin/python3 python3 /usr/bin/python3.12 2 \
    && curl -sS https://bootstrap.pypa.io/get-pip.py | python3.12 \
    && python3.12 -m pip --version \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/*

ADD backend/protocol_rpc/requirements.txt backend/protocol_rpc/requirements.txt
RUN --mount=type=cache,target=/root/.cache/pip \
    pip install --cache-dir=/root/.cache/pip -r backend/protocol_rpc/requirements.txt

RUN groupadd -r backend-group \
    && useradd -r -g backend-group backend-user \
    && mkdir -p /home/backend-user/.cache/huggingface \
    && chown -R backend-user:backend-group /home/backend-user \
    && chown -R backend-user:backend-group $path \
    && mkdir -p /genvm

ENV PYTHONPATH "${PYTHONPATH}:/${path}"
ENV FLASK_APP backend/protocol_rpc/server.py
ENV HUGGINGFACE_HUB_CACHE /home/backend-user/.cache/huggingface

ENV RUST_BACKTRACE=1

ADD \
    https://github.com/yeagerai/genvm/releases/download/$GENVM_TAG/genvm-linux-amd64.zip \
    /genvm/genvm-linux-amd64.zip

ADD \
    https://github.com/yeagerai/genvm/releases/download/$GENVM_TAG/genvm-linux-arm64.zip \
    /genvm/genvm-linux-arm64.zip

ADD \
    https://github.com/yeagerai/genvm/releases/download/$GENVM_TAG/genvm-runners.zip \
    /genvm/genvm-runners.zip

# Extract and prepare GenVM binaries
RUN cd /genvm \
    && arch="${TARGETARCH:-}" \
    && if [[ -z "$arch" ]]; then \
        # Fallback when TARGETARCH is not provided by the builder
        arch="$(dpkg --print-architecture)"; \
    fi \
    && echo "Building for architecture: $arch" \
    && case "$arch" in \
        amd64) unzip -q genvm-linux-amd64.zip ;; \
        arm64|aarch64) unzip -q genvm-linux-arm64.zip ;; \
        *) echo "Unsupported architecture: $arch (TARGETPLATFORM=$TARGETPLATFORM)"; exit 1 ;; \
    esac \
    && unzip -q genvm-runners.zip \
    && rm *.zip \
    && chown -R backend-user:backend-group /genvm \
    && cd "$path"

# Download runners conditionally (can be skipped for faster builds)
RUN echo "======================================" \
    && echo "Downloading GenVM runners" \
    && echo "This may take 10-30 minutes on first build" \
    && echo "======================================" \
    && su - backend-user -c 'timeout 1800 python3 /genvm/scripts/runners-registry download --registry /genvm/share/lib/genvm/runners/all.json --dest /genvm/share/lib/genvm/runners/ || echo "Runner download timed out after 30 minutes"' \
    && su - backend-user -c '/genvm/bin/genvm precompile || echo "Precompile failed - continuing anyway"'

COPY ../.env .
COPY backend $path/backend
COPY asgi.py $path/asgi.py
COPY uvicorn_config.py $path/uvicorn_config.py

HEALTHCHECK --interval=1s --timeout=1s --retries=30 --start-period=3s CMD python3 backend/healthcheck.py --port ${FLASK_SERVER_PORT}

###########START NEW IMAGE : DEBUGGER ###################
FROM base AS debug
RUN --mount=type=cache,target=/root/.cache/pip \
    pip install --cache-dir=/root/.cache/pip debugpy
USER backend-user
# Use uvicorn's native --reload flag for hot reloading
# This watches all Python files and automatically restarts on changes
CMD python3 -m debugpy --listen 0.0.0.0:${RPCDEBUGPORT} -m uvicorn asgi:application --host 0.0.0.0 --port ${FLASK_SERVER_PORT} --reload --reload-dir /app/backend

###########START NEW IMAGE: PRODUCTION ###################
FROM base AS prod
# Install uvicorn and production dependencies as root
USER root
RUN --mount=type=cache,target=/root/.cache/pip \
    pip install --cache-dir=/root/.cache/pip setuptools uvicorn[standard] hypercorn asgiref redis psutil prometheus-flask-exporter
# Switch back to backend-user
USER backend-user
CMD uvicorn asgi:application --host 0.0.0.0 --port ${RPCPORT:-4000} --workers ${WEB_CONCURRENCY:-1} --log-level ${LOG_LEVEL:-info}
