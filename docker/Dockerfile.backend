FROM ubuntu:24.04 AS base

ARG TARGETPLATFORM
ARG TARGETARCH


ARG GENVM_TAG=v0.2.4
ARG GENVM_POSTINSTALL_TIMEOUT=120

ENV GENVM_TAG=$GENVM_TAG

ARG path=/app
WORKDIR $path

SHELL ["/bin/bash", "-x", "-c"]
RUN apt-get update -y \
    && DEBIAN_FRONTEND=noninteractive TZ=Etc/UTC apt-get install -y --no-install-recommends \
        curl unzip xz-utils ca-certificates python3.12 python3.12-venv python3-dev gcc libssl3 \
    && mkdir -p "$HOME/.config/pip/" \
    && printf "[global]\nbreak-system-packages = true\n" >> "$HOME/.config/pip/pip.conf" \
    && update-alternatives --install /usr/bin/python3 python3 /usr/bin/python3.12 2 \
    && curl -sS https://bootstrap.pypa.io/get-pip.py | python3.12 \
    && python3.12 -m pip --version \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/*

ADD backend/protocol_rpc/requirements.txt backend/protocol_rpc/requirements.txt
RUN --mount=type=cache,target=/root/.cache/pip \
    pip install --cache-dir=/root/.cache/pip -r backend/protocol_rpc/requirements.txt

RUN groupadd -r backend-group \
    && useradd -r -g backend-group backend-user \
    && mkdir -p /home/backend-user/.cache/huggingface \
    && chown -R backend-user:backend-group /home/backend-user \
    && chown -R backend-user:backend-group $path \
    && mkdir -p /genvm

ENV PYTHONPATH "${PYTHONPATH}:/${path}"
ENV HUGGINGFACE_HUB_CACHE /home/backend-user/.cache/huggingface

ENV RUST_BACKTRACE=1

ADD \
   https://github.com/genlayerlabs/genvm/releases/download/$GENVM_TAG/genvm-linux-amd64.tar.xz \
   /genvm/genvm-linux-amd64.tar.xz

ADD \
   https://github.com/genlayerlabs/genvm/releases/download/$GENVM_TAG/genvm-linux-arm64.tar.xz \
   /genvm/genvm-linux-arm64.tar.xz

ADD \
   https://github.com/genlayerlabs/genvm/releases/download/$GENVM_TAG/genvm-universal.tar.xz \
   /genvm/genvm-universal.tar.xz

# Extract and prepare GenVM binaries
RUN cd /genvm \
    && if [[ "$TARGETPLATFORM" == "linux/amd64" ]] ; \
        then \
            tar -xf genvm-linux-amd64.tar.xz ; \
        elif [[ "$TARGETPLATFORM" == "linux/arm64" ]] ; \
        then \
            tar -xf genvm-linux-arm64.tar.xz ; \
        else \
            echo "Sorry, $TARGETPLATFORM is not supported yet" ; exit 1 ; \
        fi \
    && tar -xf genvm-universal.tar.xz \
    && rm *.tar.xz \
    && ls -R . \
    && chown -R backend-user:backend-group /genvm \
    # Ensure GenVM binaries are discoverable without running heavy precompile at build time
    && echo "export PATH=/genvm/executor/$GENVM_TAG/bin:/genvm/bin:\$PATH" >> /etc/profile.d/genvm.sh \
    && chmod 0644 /etc/profile.d/genvm.sh \
    # Attempt a light post-install but avoid hanging on precompile; proceed on timeout
    && su - backend-user -c "timeout ${GENVM_POSTINSTALL_TIMEOUT}s /genvm/executor/$GENVM_TAG/bin/post-install.py || echo 'post-install skipped or timed out; continuing'" \
    && cd "$path" \
    && true

# Keep PATH in non-login shells too
ENV PATH="/genvm/executor/$GENVM_TAG/bin:/genvm/bin:${PATH}"

COPY ../.env .
COPY backend $path/backend
COPY asgi.py $path/asgi.py
COPY uvicorn_config.py $path/uvicorn_config.py

HEALTHCHECK --interval=1s --timeout=1s --retries=30 --start-period=3s CMD python3 backend/healthcheck.py --port ${RPCPORT:-4000}

###########START NEW IMAGE : DEBUGGER ###################
FROM base AS debug
RUN --mount=type=cache,target=/root/.cache/pip \
    pip install --cache-dir=/root/.cache/pip debugpy
USER backend-user
# Use uvicorn's native --reload flag for hot reloading
# This watches all Python files and automatically restarts on changes
CMD python3 -m debugpy --listen 0.0.0.0:${RPCDEBUGPORT} -m uvicorn asgi:application --host 0.0.0.0 --port ${RPCPORT:-4000} --reload --reload-dir /app/backend

###########START NEW IMAGE: PRODUCTION ###################
FROM base AS prod
# Dependencies are already installed from backend/protocol_rpc/requirements.txt in the base stage
USER backend-user
CMD uvicorn asgi:application --host 0.0.0.0 --port ${RPCPORT:-4000} --workers ${WEB_CONCURRENCY:-1} --log-level ${LOG_LEVEL:-info}
