FROM ubuntu:24.04 AS base

ARG TARGETPLATFORM

ARG GENVM_TAG=v0.0.12

ARG path=/app
WORKDIR $path

SHELL ["/bin/bash", "-x", "-c"]
RUN apt-get update -y \
    && DEBIAN_FRONTEND=noninteractive TZ=Etc/UTC apt-get install -y --no-install-recommends \
        curl unzip xz-utils ca-certificates python3.12 \
    && mkdir -p "$HOME/.config/pip/" \
    && printf "[global]\nbreak-system-packages = true\n" >> "$HOME/.config/pip/pip.conf" \
    && update-alternatives --install /usr/bin/python3 python3 /usr/bin/python3.12 2 \
    && curl -sS https://bootstrap.pypa.io/get-pip.py | python3.12 \
    && python3.12 -m pip --version \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/*

ADD backend/protocol_rpc/requirements.txt backend/protocol_rpc/requirements.txt
RUN --mount=type=cache,target=/root/.cache/pip \
    pip install --cache-dir=/root/.cache/pip -r backend/protocol_rpc/requirements.txt

RUN groupadd -r backend-group \
    && useradd -r -g backend-group backend-user \
    && mkdir -p /home/backend-user/.cache/huggingface \
    && chown -R backend-user:backend-group /home/backend-user \
    && chown -R backend-user:backend-group $path \
    && mkdir -p /genvm

ENV PYTHONPATH "${PYTHONPATH}:/${path}"
ENV FLASK_APP backend/protocol_rpc/server.py
ENV HUGGINGFACE_HUB_CACHE /home/backend-user/.cache/huggingface

ENV RUST_BACKTRACE=1

RUN cd /genvm \
    && if [[ "$TARGETPLATFORM" == "linux/amd64" ]] ; \
       then \
           EXECUTOR_URL="https://github.com/yeagerai/genvm/releases/download/$GENVM_TAG/genvm-linux-amd64.zip" ; \
       elif [[ "$TARGETPLATFORM" == "linux/arm64" ]] ; \
       then \
           EXECUTOR_URL="https://github.com/yeagerai/genvm/releases/download/$GENVM_TAG/genvm-linux-arm64.zip" && \
           DIR="$(pwd)" && \
           mkdir -p /openssl && cd /openssl && \
           curl -L --fail-with-body -H 'Accept: application/octet-stream' -o "openssl.tar.xz" "http://mirror.archlinuxarm.org/aarch64/core/openssl-1.0-1.0.2.u-1-aarch64.pkg.tar.xz" && \
           tar -xf openssl.tar.xz && \
           cp usr/lib/*.so* /usr/lib/ && \
           cd "$DIR" || exit 1 ; \
       else echo "Sorry, $TARGETPLATFORM is not supported yet" ; exit 1 ; \
       fi \
    && curl -L --fail-with-body -H 'Accept: application/octet-stream' -o executor.zip "$EXECUTOR_URL" \
    && RUNNERS_URL="https://github.com/yeagerai/genvm/releases/download/$GENVM_TAG/genvm-runners.zip" \
    && curl -L --fail-with-body -H 'Accept: application/octet-stream' -o runners.zip "$RUNNERS_URL" \
    && unzip runners.zip && unzip executor.zip && rm runners.zip executor.zip \
    && ls -R . \
    && cd "$path" \
    && true

RUN su - backend-user -c '/genvm/bin/genvm precompile'

COPY ../.env .
COPY backend $path/backend

HEALTHCHECK --interval=1s --timeout=1s --retries=30 --start-period=3s CMD python3 backend/healthcheck.py --port ${FLASK_SERVER_PORT}

###########START NEW IMAGE : DEBUGGER ###################
FROM base AS debug
RUN --mount=type=cache,target=/root/.cache/pip \
    pip install --cache-dir=/root/.cache/pip debugpy watchdog
USER backend-user
CMD watchmedo auto-restart --no-restart-on-command-exit --recursive --pattern="*.py" --ignore-patterns="*.pyc;*__pycache__*" -- python3 -m debugpy --listen 0.0.0.0:${RPCDEBUGPORT} -m flask run -h 0.0.0.0 -p ${FLASK_SERVER_PORT}

###########START NEW IMAGE: PRODUCTION ###################
FROM base AS prod
USER backend-user
CMD flask run -h 0.0.0.0 -p ${FLASK_SERVER_PORT}
